generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id                   String          @id @default(uuid())
  title                String
  tickets              Ticket[]
  venue                String
  dateTime             DateTime
  totalNumberOfTickets Int
  description          String
  photoUrls            Json
  priceOfferings       PriceOffering[]
  Booking              Booking[]
}

model PriceOffering {
  id       String @default(uuid())
  eventId  String
  name     String
  price    Float
  event    Event  @relation(fields: [eventId], references: [id])
  capacity Int

  @@id([id, eventId])
}

model Ticket {
  id                   String    @id @default(uuid())
  eventId              String
  bookingId            String?
  status               Status
  event                Event     @relation(fields: [eventId], references: [id])
  booking              Booking?  @relation(fields: [bookingId], references: [id])
  reservationExpiresAt DateTime?
}

model Booking {
  id                    String        @id @default(uuid())
  userId                String
  eventId               String
  priceOfferingSelected Json
  tickets               Ticket[]
  amountPaid            Float
  paymentStatus         PaymentStatus
  paymentSessionId      String?
  orderExpiryTime       DateTime      @default(now())
  createdAt             DateTime      @default(now())
  numVerifiedAtVenue    Int?
  qrCode                String        @unique
  event                 Event         @relation(fields: [eventId], references: [id])
  concerns              Concern[]
}

model Message {
  id        String        @id @default(uuid())
  name      String
  userId    String
  email     String
  message   String
  status    MessageStatus @default(UNREAD)
  createdAt DateTime      @default(now())
}

model Verifier {
  id    String @id @default(uuid())
  email String
}

model Concern {
  id        String        @id @default(uuid())
  bookingId String        @unique
  message   String
  contact   String
  email     String
  createdAt DateTime      @default(now())
  status    ConcernStatus @default(UNRESOLVED)
  booking   Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model User {
  id          String   @id
  email       String   @unique
  name        String
  phoneNumber String?
  createdAt   DateTime @default(now())
}

enum Status {
  AVAILABLE
  RESERVED
  BOOKED
}

enum ConcernStatus {
  RESOLVED
  UNRESOLVED
}

enum MessageStatus {
  UNREAD
  READ
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  EXPIRED
  CANCELLED
}
